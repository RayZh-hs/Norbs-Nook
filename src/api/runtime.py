"""
- src/api/runtime.py

A library for handling the wui_runtime executable generated by cpp.

The runtime can be compiled with CMake, using the CMake executable: wui_runtime.

The compiled runtime will by default be at src/api/builds/wui_runtime.
"""

import subprocess
import logging
import time         # A little delay for the runtime to react shouldn't hurt.

class Runtime:
    def __init__(self, runtime_path: str):
        self.runtime_path = runtime_path
        self.process = None
    
    def start(self):
        if self.process is not None:
            raise RuntimeError("Runtime is already running.")
        self.process = subprocess.Popen(
            [self.runtime_path],
            stdin  = subprocess.PIPE,
            stdout = subprocess.PIPE,
            stderr = subprocess.PIPE,
            text   = True
        )
    
    def end(self):
        if self.process is None:
            raise RuntimeError("Runtime is not running.")
        try:
            self.process.stdin.write("exit\n")
            self.process.stdin.flush()
            self.process.wait(timeout=3)
        except subprocess.TimeoutExpired:
            self.process.kill()
        self.process = None
    
    def write(self, data: str):
        if self.process is None:
            raise RuntimeError("Runtime is not running.")
        self.process.stdin.write(data)
        self.process.stdin.flush()
    
    def read_line(self):
        if self.process is None:
            raise RuntimeError("Runtime is not running.")
        return self.process.stdout.readline()

    def read(self):
        if self.process is None:
            raise RuntimeError("Runtime is not running.")
        return self.process.stdout.read()
    
    def query(self, data: str):
        logging.log(logging.INFO, f"Querying runtime with: {data}")
        if self.process is None:
            raise RuntimeError("Runtime is not running.")
        self.write(data)
        logging.log(logging.INFO, "Sent data; Waiting for response...")
        try:
            time.sleep(0.3)
            line = self.read_line()
            logging.log(logging.INFO, f"Received response: {line}")
            return line
        except subprocess.TimeoutExpired:
            logging.log(logging.ERROR, "Query timed out.")
            raise TimeoutError("Query timed out.")